{
    "pattern_name": "safe_file_read_with_hex_preview",
    "description": "Read a file safely with path sandboxing, size cap, UTF-8 decode fallback to hex preview for binary, and structured status/result.",
    "language": "python",
    "file_path": "c:\\Projects\\MCP Server\\src\\toolz.py",
    "locator": {
        "type": "function_name",
        "function_name": "read_project_file"
    },
    "extraction_strategy": "python_ast",
    "source_code": "def read_project_file(absolute_file_path: str, max_bytes: int = 2_000_000) -> Dict[str, Any]:\n    \"\"\"\n    Read a file from disk with path safety checks.\n\n    Args:\n        absolute_file_path (str): Full absolute path to the file (must be within the project root).\n        max_bytes (int, optional): Maximum number of bytes to read (default: 2,000,000).\n\n    Returns:\n        dict: {\n            'status': 'success'|'error',\n            'file_path': str,\n            'content': str or None,  # UTF-8 text or hex preview for binary\n            'message': str\n        }\n\n    Usage:\n        Use this tool to safely read the contents of a file for display, editing, or analysis. Binary files return a hex preview. Files outside project roots are blocked.\n    \"\"\"\n    path = pathlib.Path(absolute_file_path)\n    if not _is_safe_path(path):\n        return {\"status\": \"error\", \"file_path\": absolute_file_path, \"content\": None, \"message\": \"Access denied: Path is outside configured project roots.\"}\n    if not path.is_file():\n        return {\"status\": \"error\", \"file_path\": absolute_file_path, \"content\": None, \"message\": \"Not a file.\"}\n    try:\n        data = path.read_bytes()[:max_bytes]\n        try:\n            content = data.decode(\"utf-8\")\n            message = f\"Successfully read {len(data)} bytes as text.\"\n        except UnicodeDecodeError:\n            content = data.hex()[:1000]  # Return a hex preview for binary files\n            message = f\"Read {len(data)} bytes of binary data (showing hex preview).\"\n        return {\"status\": \"success\", \"file_path\": absolute_file_path, \"content\": content, \"message\": message}\n    except Exception as e:\n        logger.error(\"Failed to read file '%s': %s\", absolute_file_path, e, exc_info=True)\n        return {\"status\": \"error\", \"file_path\": absolute_file_path, \"content\": None, \"message\": str(e)}",
    "created_at": "2025-08-10T05:44:00Z",
    "updated_at": "2025-08-10T05:44:00Z",
    "source_file": "c:\\Projects\\MCP Server\\src\\toolz.py",
    "function_name": "read_project_file",
    "added_at_utc": "2025-08-10T05:44:00Z"
}