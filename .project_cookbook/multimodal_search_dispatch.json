{
    "pattern_name": "multimodal_search_dispatch",
    "description": "Unified entrypoint for multi-modal codebase search, dispatching to keyword, semantic, AST, references, similarity, and task_verification modes. Enforces robust error handling and schema validation.",
    "source_file": "c:\\Projects\\MCP Server\\src\\toolz.py",
    "function_name": "unified_search",
    "source_code": "def unified_search(request: SearchRequest) -> Dict[str, Any]:\n    \"\"\"\n    Multi-modal codebase search tool. Supports keyword, semantic, AST, references, similarity, and task_verification modes.\n    This tool enforces a hard timeout and robust error handling using a separate process.\n    If the tool fails or times out, it returns a structured MCP error response.\n\n    Args:\n        request (SearchRequest):\n            - search_type (str): One of ['keyword', 'semantic', 'ast', 'references', 'similarity', 'task_verification'].\n            - query (str): The search string or code snippet.\n            - project_name (str): Name of the project as defined in PROJECT_ROOTS.\n            - params (dict, optional):\n                - includes (List[str], optional): Restrict search to these files or folders.\n                - max_results (int, optional): Maximum number of results to return.\n                - extensions (List[str], optional): Filter files by extension (for 'keyword').\n                - target_node_type (str, optional): 'function', 'class', or 'any' (for 'ast').\n                - file_path, line, column (for 'references').\n\n    Returns:\n        dict: {\n            'status': 'success'|'error'|'not_found', 'results': list, ...\n        }\n\n    Usage:\n        - 'keyword': Fast literal search. Supports includes, extensions, max_results.\n        - 'semantic': Natural language/code search. Requires prior indexing. Supports includes, max_results.\n        - 'ast': Find definitions by structure. Supports includes, target_node_type, max_results.\n        - 'references': Find usages of a symbol. Supports includes, file_path, line, column, max_results.\n        - 'similarity': Find similar code blocks. Query must be a code snippet. Supports includes, max_results.\n        - 'task_verification': Check if a task is implemented. Query is a task description. Supports includes, max_results.\n    \"\"\"\n    search_type = request.search_type\n    project_name = request.project_name\n    logger.info(f\"[search] type='{search_type}' project='{project_name}' q='{request.query[:50]}...'\")\n\n    project_path = _get_project_path(project_name)\n    if not project_path:\n        return {\"status\": \"error\", \"message\": f\"Project '{project_name}' not found.\"}\n\n    # --- Router logic to call the correct internal search function ---\n    search_functions = {\n        \"keyword\": _search_by_keyword,\n        \"semantic\": _search_by_semantic,\n        \"ast\": _search_by_ast,\n        \"references\": _search_for_references,\n        \"similarity\": _search_for_similarity,\n        \"task_verification\": _verify_task_implementation,\n    }\n    \n    search_func = search_functions.get(search_type)\n\n    if search_func:\n        return search_func(request.query, project_path, request.params)\n    else:\n        return {\"status\": \"error\", \"message\": \"Invalid search type specified.\"}",
    "added_at_utc": "2025-07-09T04:18:23Z"
}