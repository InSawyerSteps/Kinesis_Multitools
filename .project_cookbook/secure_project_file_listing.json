{
    "pattern_name": "secure_project_file_listing",
    "description": "Canonical function for recursively listing files in a project, with robust filtering for extensions, binary files, and dependency folders. Ensures all paths are within the project root.",
    "source_file": "c:\\Projects\\MCP Server\\src\\toolz.py",
    "function_name": "list_project_files",
    "source_code": "def list_project_files(project_name: str, extensions: Optional[List[str]] = None, max_items: int = 1000) -> List[str]:\n    \"\"\"\n    Recursively list files for a given project.\n\n    Args:\n        project_name (str): Name of the project as defined in PROJECT_ROOTS (e.g., \"MCP-Server\").\n        extensions (List[str], optional): List of file extensions to include (e.g., [\"py\", \"md\"]). If omitted, all files are included.\n        max_items (int, optional): Maximum number of files to return (default: 1000).\n\n    Returns:\n        List[str]: Absolute file paths as strings.\n\n    Usage:\n        Use this tool to get a list of all source files in a project, optionally filtered by extension. Useful for building file pickers, search indexes, or for pre-filtering files for other tools.\n    \"\"\"\n    logger.info(\"[list_files] project=%s extensions=%s\", project_name, extensions)\n    root = PROJECT_ROOTS.get(project_name)\n    if not root:\n        logger.error(\"Invalid project name: %s\", project_name)\n        return []\n    results = []\n    try:\n        for fp in _iter_files(root, extensions):\n            if len(results) >= max_items:\n                logger.warning(\"Hit max_items limit of %d. Returning partial results.\", max_items)\n                break\n            results.append(str(fp.resolve()))\n        logger.info(\"[list_files] Found %d paths.\", len(results))\n    except Exception as e:\n        logger.error(\"Error listing files for project '%s': %s\", project_name, e, exc_info=True)\n    return results",
    "added_at_utc": "2025-07-09T04:18:08Z"
}